const serviceWorkerDebug=!1,cacheName="voltaicbms-interface-web-v6.2al",appShellFiles=["index.html","app.webmanifest","fonts/Pervitina-Dex.ttf","fonts/Pervitina-Dex-Monospace.ttf","css/dynamic-style.css","css/fixed-style.css","css/fonts.css","css/index-dark.css","css/index-light.css","css/settings.css","css/colors.css","css/tables.css","css/libraries/coloris.css","css/libraries/simplekeyboard.css","dist/main.js","img/icon/64x64.png","img/icon/192x192.png","img/icon/256x256.png","img/icon/512x512.png","img/icon/1024x1024.png","img/icon/1500x1500.png","img/off.jpg","img/off-switch.png","img/on-button.png","img/on-switch.jpg"];self.addEventListener("install",e=>{console.log("[Service Worker] Install"),e.waitUntil((async()=>{const e=await caches.open(cacheName);serviceWorkerDebug&&console.log("[Service Worker] Caching all: app shell and content"),appShellFiles.forEach(s=>{e.add(s).catch(e=>console.error(`[Service Worker] can't load ${s} to cache`))})})())}),self.addEventListener("fetch",c=>{c.respondWith((async()=>{var e,s=await caches.match(c.request);return serviceWorkerDebug&&console.log("[Service Worker] Fetching resource: "+c.request.url),s||(s=await fetch(c.request),e=await caches.open(cacheName),serviceWorkerDebug&&console.log("[Service Worker] Caching new resource: "+c.request.url),await e.put(c.request,s.clone()),s)})())}),self.addEventListener("activate",async()=>{await self.clients.claim(),caches.keys().then(e=>Promise.all(e.map(e=>{if(e!==cacheName)return caches.delete(e)})))}),self.addEventListener("message",async e=>{if("SKIP_WAITING"===e.data&&await self.skipWaiting(),"GET_VERSION"===e.data)for(const s of await self.clients.matchAll())s.postMessage({msg:"version",version:cacheName})});