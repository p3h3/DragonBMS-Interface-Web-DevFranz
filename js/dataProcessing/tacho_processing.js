let drivenDistanceOffset=-1,usedEnergyOffset,tachoConfigObj=new tachoConfig,tachoAveragingBuffer=[],maxInlineValueBuffer=[],dataLoggingBufferInline=[],inlineDataLoggingAveragingBuffer=[],lastInlineLoggingDataTimeStamp=Date.now(),inlineHertzSampleBuffer=[];function processTachoData(e){e=gatherTachoData(e);if(void 0!==e){var i,r=getTimeStamp(),o=getMsToday(),g=(tachoAveragingBuffer.unshift(e),deleteOlderDataPackets(tachoAveragingBuffer,interfaceConfig.maxTachoAveragingInterval),averagedData(getLastXSeconds(tachoAveragingBuffer,interfaceConfig.tachoDataAveragingIntervalV),1)),s=averagedData(getLastXSeconds(tachoAveragingBuffer,interfaceConfig.tachoDataAveragingIntervalT),1),f=(bmsObj.isConnected()&&void 0!==bmsAveragingBuffer.at(-1)?(f=(f=bmsAveragingBuffer.at(-1)).eU1+f.eU2+f.eU3,-1===drivenDistanceOffset&&bmsObj.isConnected()&&(drivenDistanceOffset=e.tripOdo/1e3,usedEnergyOffset=f),i=e.tripOdo/1e3-drivenDistanceOffset,f=(f-usedEnergyOffset)/3.6/i,i=Math.abs((remainingEnergy1+remainingEnergy2+remainingEnergy3)/f),setEconomyGauges({whkmSession:f,range:i})):disableEconomyGauges(),tachoConfigObj.updatePulseCount(e.calibPulseCount),setInlineTempValues({motor:s.motorTemp,extern:s.integratedTemp}),setTachoGauges({tripOdo:e.tripOdo,vehicleOdo:e.vehicleOdo}),setSpeedGaugeValues(g),{time:lastInlineLoggingDataTimeStamp,speed:e.speed,motorTemp:e.motorTemp,integratedTemp:e.integratedTemp});maxInlineValueBuffer.unshift(f),deleteOlderDataPackets(maxInlineValueBuffer,60);let a=[],t=[],n=[];maxInlineValueBuffer.forEach(e=>{isNaN(e.speed)||a.unshift(e.speed),isNaN(e.motorTemp)||t.unshift(e.motorTemp).toFixed(1),isNaN(e.integratedTemp)||n.unshift(e.integratedTemp).toFixed(1)}),setInlineMaxValues({speed:Math.max(...a),motorTemp:Math.max(...t).toFixed(1),externTemp:Math.max(...n).toFixed(1)}),dataLoggingEnabled&&tachoObj.isConnected()&&(i=["",o,r,"","","","","","","","","",e.speed,e.rpm,e.motorTemp,e.integratedTemp,e.tripOdo].join(";"),loggingDataBuffer.push(i))}}