export default class dataDistribution{providedDataLabels=[];expectedDataLabels=[];providedDataObj={};expectedDataObj={};dataMap=new dataMap;expecterUpdateFunctions=[];constructor(){}setDataMap(t){this.dataMap=t}addMapping(t,a){this.providedDataLabels.includes(t)&&this.expectedDataLabels.includes(a)?this.dataMap.addMapping(t,a):console.log("[dataDistribution] failed to add mapping: input or output not contained in label lists")}updateProvidedData(t){for(const a of Object.keys(t))this.providedDataLabels.includes(a)&&(this.providedDataObj[a]=t[a])}executeMapping(){for(const t of Object.keys(this.providedDataObj))for(const a of this.dataMap.getOutputs(t))this.expectedDataLabels.includes(a)?this.expectedDataObj[a]=this.providedDataObj[t]:console.log("[dataDistribution] failed to execute mapping: mapping output not contained in expected data label list")}updateDataExpecters(){for(const t of this.expecterUpdateFunctions)t(this.expectedDataObj)}registerExpecterUpdate(t){this.expecterUpdateFunctions.push(t)}addProvidedDataLabels(t){this.providedDataLabels=this.providedDataLabels.concat(t)}addExpectedDataLabels(t){this.expectedDataLabels=this.expectedDataLabels.concat(t)}}class dataMap{mapObj=[];constructor(){}addMapping(t,a){this.mapObj.push({input:t,output:a})}removeMapping(a,e){this.mapObj=this.mapObj.filter(function(t){return t.input===a&&t.output===e})}getMap(){return this.mapObj}getOutputs(a){var t=this.mapObj.filter(function(t){return t.input===a}).map(t=>t.output);return t.length,t}getInput(a){var t=this.mapObj.filter(function(t){return t.output===a}).map(t=>t.input);return 1<t.length&&console.log("[dataMap] more than one input for output!"),t}}export{dataMap};