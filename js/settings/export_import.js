class bmsConfigFile extends fileObject{config;suggestedFileName;constructor(){super("json"),this.suggestedFileName=this.#getSuggestedFileName()}readInConfig(e){this.config=e,this.suggestedFileName=this.#getSuggestedFileName()}async save(){var e=this.config.getJSON();if(this.hasFileAccess()||this.saveLegacy(this.suggestedFileName,e),await this.getSaveFileHandle(this.#getSuggestedFileName()),void 0===this.writableStream)console.log("[config file] error initialising write stream");else{try{console.log(e),this.writableStream.write(e)}catch(e){console.log("[config file] error writing file stream: "+e)}this.closeObject()}}async readInFile(){await this.getReadFileHandle();var e=await(await this.fileHandle.getFile()).text();this.config.readInJSON(e)}closeObject(){this.hasFileAccess()&&(void 0===this.writableStream?console.log("initialise object before closing it"):this.writableStream.close())}#getSuggestedFileName(){let e="";void 0!==getIdValue("board-config-device-name")&&(e=getIdValue("board-config-device-name"));var i=new Date;return e+"_config_"+i.getFullYear().toString()+"_"+pad2(i.getMonth()+1)+"_"+pad2(i.getDate())+"__"+pad2(i.getHours())+"_"+pad2(i.getMinutes())+"_"+pad2(i.getSeconds())}}class bmsCalibFile extends fileObject{calib;suggestedFileName;constructor(){super("json")}readInCalib(e){this.calib=e,this.suggestedFileName=this.#getSuggestedFileName()}getCalib(){return this.calib}async save(){var e=this.calib.getJSON();if(this.hasFileAccess()||this.saveLegacy(this.suggestedFileName,e),await this.getSaveFileHandle(this.#getSuggestedFileName()),void 0===this.writableStream)console.log("[calib file] error initialising write stream");else{try{console.log(e),this.writableStream.write(e)}catch(e){console.log("[calib file] error writing file stream: "+e)}this.closeObject()}}async readInFile(){await this.getReadFileHandle();var e=await(await this.fileHandle.getFile()).text();this.calib.readInJSON(e)}closeObject(){this.hasFileAccess()&&(void 0===this.writableStream?console.log("initialise object before closing it"):this.writableStream.close())}#getSuggestedFileName(){let e="";void 0!==getIdValue("board-config-device-name")&&(e=getIdValue("board-config-device-name"));var i=new Date;return e+"_calib_"+i.getFullYear().toString()+"_"+pad2(i.getMonth()+1)+"_"+pad2(i.getDate())+"__"+pad2(i.getHours())+"_"+pad2(i.getMinutes())+"_"+pad2(i.getSeconds())}}getId("board-calib-open-json").addEventListener("click",()=>{var e;hasFSAccess?bmsCalibObj.initialised?((e=new bmsCalibFile).readInCalib(bmsCalibObj),e.readInFile().then(()=>{bmsCalibObj.setGUIValues()})):console.log("[calib import] connect and read first!"):console.log("[calib import] no fs access - feature unavailable!")}),hasFSAccess||(getId("board-calib-open-json").disabled=!0,getId("board-config-open-json").disabled=!0),getId("board-calib-save-json").addEventListener("click",()=>{var e;bmsCalibObj.initialised?((e=new bmsCalibFile).readInCalib(bmsCalibObj),e.save().then(()=>{console.log("[calib export] saved successfully!")})):console.log("[calib export] connect and read first!")}),getId("board-config-open-json").addEventListener("click",()=>{var e;hasFSAccess?bmsConfigObj.initialised?((e=new bmsConfigFile).readInConfig(bmsConfigObj),e.readInFile().then(()=>{bmsConfigObj.setGUIValues()})):console.log("[config import] connect and read first!"):console.log("[config import] no fs access - feature unavailable!")}),getId("board-config-save-json").addEventListener("click",()=>{var e;bmsCalibObj.initialised?((e=new bmsConfigFile).readInConfig(bmsConfigObj),e.save().then(()=>{console.log("[config export] saved successfully!")})):console.log("[config export] connect and read first!")});