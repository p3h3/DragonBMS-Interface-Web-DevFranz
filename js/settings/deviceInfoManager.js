import gui_elements from"../gui_elements";import sf from"../helpers/small_functions";export default class deviceInfoManager extends gui_elements{chooser;devicesInfo;chosenDevice;#blocked=!1;constructor(){super(),this.devicesInfo=new devicesInfos,this.chooser=document.getElementsByClassName("device-info-device-chooser")[0],this.addEventListeners()}addEventListeners(){if(!this.#blocked){let e=this.#getDeviceOptions();this.chooser.addEventListener("click",s=>{e.forEach(e=>{void 0!==e.classList&&(e.classList.add("device-info-device-not-chosen"),e.isSameNode(s.target))&&(e.classList.remove("device-info-device-not-chosen"),this.chosenDevice=s.target.innerHTML.toLowerCase())}),this.#updateGUIFields(this.devicesInfo.getDeviceInfo(this.chosenDevice))})}}#updateGUIFields(e){sf.setValueTexts(this.deviceModelFields,e.modelNumber),sf.setValueTexts(this.deviceHardwareRevisionFields,e.hardwareRevision),sf.setValueTexts(this.deviceFirmwareRevisionFields,e.firmwareRevision),sf.setValueTexts(this.deviceSerialNumberFields,e.serialNumber),"not supported"===e.serialNumber&&sf.classListValueTextsAdd(this.deviceSerialNumberFields,"fault"),"not supported"===e.modelNumber&&sf.classListValueTextsAdd(this.deviceModelFields,"fault")}#getDeviceOptions(){let s=[];return this.chooser.childNodes.forEach(e=>{s.push(e)}),s}blockChooser(){this.#blocked=!0}unblockChooser(){this.#blocked=!1}}class devicesInfos{deviceInfos={};constructor(){}getDeviceInfo(e){let s={modelNumber:"not connected",hardwareRevision:"not connected",firmwareRevision:"not connected",serialNumber:"not connected"};return s=Object.keys(this.deviceInfos).includes(e.toLowerCase())?this.deviceInfos[e.toLowerCase()]:s}updateDeviceInfo(e,s){this.deviceInfos[e.toLowerCase()]=s}}export{devicesInfos};