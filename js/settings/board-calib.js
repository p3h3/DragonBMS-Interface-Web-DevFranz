import sf from"../helpers/small_functions";import localConfigCalibManager from"../helpers/configcalib_processing";import localConfigCalibGUI from"../helpers/configcalib_processing";export default class bmsCalib extends localConfigCalibGUI{inVolt1CorrectionVal;inVolt2CorrectionVal;inVolt3CorrectionVal;outVoltCorrectionVal;shunt1Val;shunt2Val;shunt3Val;constructor(t){super(t),this.initialised=!1,this.bmsObj=t}addEventListeners(){sf.getId("calculateInV1").addEventListener("click",()=>{this.inVolt1Correction.value=(this.inVolt1CorrectionVal*(parseFloat(this.inVolt1Actual.innerText)/parseFloat(this.inVolt1Target.value))).toFixed(0)}),sf.getId("calculateInV2").addEventListener("click",()=>{this.inVolt2Correction.value=(this.inVolt2CorrectionVal*(parseFloat(this.inVolt2Actual.innerText)/parseFloat(this.inVolt2Target.value))).toFixed(0)}),sf.getId("calculateInV3").addEventListener("click",()=>{this.inVolt3Correction.value=(this.inVolt3CorrectionVal*(parseFloat(this.inVolt3Actual.innerText)/parseFloat(this.inVolt3Target.value))).toFixed(0)}),sf.getId("calculateOut").addEventListener("click",()=>{this.outVoltCorrection.value=(this.outVoltCorrectionVal*(parseFloat(this.outVoltActual.innerText)/parseFloat(this.outVoltTarget.value))).toFixed(0)}),sf.getId("calculateShunt1").addEventListener("click",()=>{this.shunt1.value=(this.shunt1Val*(parseFloat(this.shunt1Actual.innerText)/parseFloat(this.shunt1Target.value))).toFixed(0)}),sf.getId("calculateShunt2").addEventListener("click",()=>{this.shunt2.value=(this.shunt2Val*(parseFloat(this.shunt2Actual.innerText)/parseFloat(this.shunt2Target.value))).toFixed(0)}),sf.getId("calculateShunt3").addEventListener("click",()=>{this.shunt3.value=(this.shunt3Val*(parseFloat(this.shunt3Actual.innerText)/parseFloat(this.shunt3Target.value))).toFixed(0)}),sf.getId("board-calib-read").addEventListener("click",()=>{this.readBMSCalib((t,i)=>{t?i?this.indicateSuccess(500):this.indicateWarning(500):this.indicateFailure()})}),sf.getId("board-calib-write").addEventListener("click",()=>{this.readInGUIValues(),this.writeBMSCalib()})}isStandardCalib(){return 6e3===this.inVolt1CorrectionVal&&6e3===this.inVolt2CorrectionVal&&6e3===this.inVolt3CorrectionVal&&500===this.shunt1Val&&500===this.shunt2Val&&500===this.shunt3Val}indicateSuccess(t){this.boardCalibTable.classList.add("success"),setTimeout(()=>{this.boardCalibTable.classList.remove("success")},t)}indicateWarning(t){this.boardCalibTable.classList.add("warning"),setTimeout(()=>{this.boardCalibTable.classList.remove("warning")},t)}indicateFailure(){this.boardCalibTable.classList.add("fault"),setTimeout(()=>{this.boardCalibTable.classList.remove("fault")},2e3)}readInCalibObject(t){this.inVolt1CorrectionVal=t.inVolt1Correction,this.inVolt2CorrectionVal=t.inVolt2Correction,this.inVolt3CorrectionVal=t.inVolt3Correction,this.outVoltCorrectionVal=t.outVoltCorrection,this.shunt1Val=t.shunt1,this.shunt2Val=t.shunt2,this.shunt3Val=t.shunt3}getCalibObject(){var t={};return t.inVolt1Correction=this.inVolt1CorrectionVal,t.inVolt2Correction=this.inVolt2CorrectionVal,t.inVolt3Correction=this.inVolt3CorrectionVal,t.outVoltCorrection=this.outVoltCorrectionVal,t.shunt1=this.shunt1Val,t.shunt2=this.shunt2Val,t.shunt3=this.shunt3Val,t}readInJSON(t){let i;try{i=JSON.parse(t)}catch(t){console.log("[bms calib] unable to read in JSON: "+t)}void 0!==i&&this.readInCalibObject(i)}getJSON(){if(this.initialised)return JSON.stringify(this.getCalibObject())}readInBuffer(t){var i=this.getBuffer();return this.inVolt1CorrectionVal=t.getUint8(1)<<8|t.getUint8(0),this.inVolt2CorrectionVal=t.getUint8(3)<<8|t.getUint8(2),this.inVolt3CorrectionVal=t.getUint8(5)<<8|t.getUint8(4),this.outVoltCorrectionVal=t.getUint8(7)<<8|t.getUint8(6),this.shunt1Val=t.getUint8(9)<<8|t.getUint8(8),this.shunt2Val=t.getUint8(11)<<8|t.getUint8(10),this.shunt3Val=t.getUint8(13)<<8|t.getUint8(12),this.initialised=!0,!sf.arraysEqual(i,this.getBuffer())}readInGUIValues(){this.inVolt1CorrectionVal=parseInt(this.inVolt1Correction.value),this.inVolt2CorrectionVal=parseInt(this.inVolt2Correction.value),this.inVolt3CorrectionVal=parseInt(this.inVolt3Correction.value),this.outVoltCorrectionVal=parseInt(this.outVoltCorrection.value),this.shunt1Val=parseInt(this.shunt1.value),this.shunt2Val=parseInt(this.shunt2.value),this.shunt3Val=parseInt(this.shunt3.value)}setGUIValues(){this.inVolt1Correction.value=this.inVolt1CorrectionVal,this.inVolt2Correction.value=this.inVolt2CorrectionVal,this.inVolt3Correction.value=this.inVolt3CorrectionVal,this.outVoltCorrection.value=this.outVoltCorrectionVal,this.shunt1.value=this.shunt1Val,this.shunt2.value=this.shunt2Val,this.shunt3.value=this.shunt3Val}getBuffer(){var t=[];return t[0]=sf.to16bit(this.inVolt1CorrectionVal)[0],t[1]=sf.to16bit(this.inVolt1CorrectionVal)[1],t[2]=sf.to16bit(this.inVolt2CorrectionVal)[0],t[3]=sf.to16bit(this.inVolt2CorrectionVal)[1],t[4]=sf.to16bit(this.inVolt3CorrectionVal)[0],t[5]=sf.to16bit(this.inVolt3CorrectionVal)[1],t[6]=sf.to16bit(this.outVoltCorrectionVal)[0],t[7]=sf.to16bit(this.outVoltCorrectionVal)[1],t[8]=sf.to16bit(this.shunt1Val)[0],t[9]=sf.to16bit(this.shunt1Val)[1],t[10]=sf.to16bit(this.shunt2Val)[0],t[11]=sf.to16bit(this.shunt2Val)[1],t[12]=sf.to16bit(this.shunt3Val)[0],t[13]=sf.to16bit(this.shunt3Val)[1],t}updateActualData(t){this.inVolt1Actual.innerHTML=t.u1,this.inVolt2Actual.innerHTML=t.u2,this.inVolt3Actual.innerHTML=t.u3,this.shunt1Actual.innerHTML=t.i1,this.shunt2Actual.innerHTML=t.i2,this.shunt3Actual.innerHTML=t.i3,this.outVoltActual.innerHTML=t.uOut}readBMSCalib(s){this.bmsObj.calibCharacteristic.readValue().then(t=>{var i=this.initialised;this.initialised&&this.readInGUIValues();let e=this.readInBuffer(t);i||(e=!0),this.setGUIValues(),this.isStandardCalib()?void 0!==(t=new localConfigCalibManager(this.bmsObj).getLatestCalibForSerialNumber(this.bmsObj.serialNumber))&&(this.readInCalibObject(t.calib),this.setGUIValues(),this.writeBMSCalib()):this.addNewCalib(this,this.bmsObj),this.fillInCalibBackupGUI(),s(!0,e)})}writeBMSCalib(){this.bmsObj.calibCharacteristic.writeValue(Uint8Array.from(this.getBuffer()).buffer).then(t=>{console.log("successfully wrote calib"),setTimeout(()=>{this.readBMSCalib(t=>{t?this.indicateSuccess(3e3):this.indicateFailure()})},200)}).catch(t=>{this.indicateFailure()})}}