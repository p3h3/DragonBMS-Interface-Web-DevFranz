import sf from"../helpers/small_functions";import wakeLock from"../helpers/wakelock";import colorMode from"../helpers/color_mode";import gui from"../gui";import Coloris from"@melloware/coloris";export default class interfaceConfig extends gui{colorModeObj=null;filterBMSConnection;connectionStepTimeout;constructor(){super(),this.wakeLock1=new wakeLock,this.updateConfig(),this.wakeLock&&this.wakeLock1.enable(),setTimeout(async()=>{await sf.until(()=>null!==colorMode),this.setInterfaceConfigValues()},100),this.addEventListeners(),this.colorisInit()}initColorModeObj(e){this.colorModeObj=e}updateConfig(){this.filterBMSConnection=JSON.parse(localStorage.getItem("filterBMSConnection")||sf.mobileDevice()),this.wakeLock=JSON.parse(localStorage.getItem("wakeLockEnabled")||sf.mobileDevice()),this.colorMode=localStorage.getItem("lastColorMode")||"dark",this.customColorForeground=localStorage.getItem("customColorForeground")||"rgb(255,255,255)",this.customColorBackground=localStorage.getItem("customColorBackground")||"rgb(0,0,0)",this.customColorAccent=localStorage.getItem("customColorAccent")||"rgb(0,193,220)",this.customColorCaptureModeBackground=localStorage.getItem("customColorCaptureModeBackground")||"rgba(255,255,255, 0.6)",this.autoReadBMSConfigCalib=JSON.parse(localStorage.getItem("autoReadBMSConfigCalib")||!0),this.devTileActive=JSON.parse(localStorage.getItem("devTileActive")||!0),this.averagingIntervalU=parseFloat(localStorage.getItem("averagingIntervalU")||"0.25"),this.averagingIntervalI=parseFloat(localStorage.getItem("averagingIntervalI")||"0.3"),this.averagingIntervalT=parseFloat(localStorage.getItem("averagingIntervalT")||"0.6"),this.averagingIntervalCalib=parseFloat(localStorage.getItem("averagingIntervalCalib")||"0.5"),this.tachoDataAveragingIntervalV=parseFloat(localStorage.getItem("tachoAveragingIntervalV")||"0.7"),this.tachoDataAveragingIntervalT=parseFloat(localStorage.getItem("tachoAveragingIntervalT")||"5"),this.maxAveragingInterval=Math.max(this.averagingIntervalU,this.averagingIntervalI,this.averagingIntervalT,this.averagingIntervalCalib),this.maxTachoAveragingInterval=Math.max(this.tachoDataAveragingIntervalV,this.tachoDataAveragingIntervalT),this.maxValueHoldOnTime=parseFloat(localStorage.getItem("maxValuesHoldOnTime")||"20"),this.connectionStepTimeout=parseFloat(localStorage.getItem("connectionStepTimeout")||"2.0"),this.showBMSExtTemp=JSON.parse(localStorage.getItem("showBMSExtTemp")||!0),this.showBMSIntTemp=JSON.parse(localStorage.getItem("showBMSIntTemp")||!0),this.showMotorTemp=JSON.parse(localStorage.getItem("showMotorTemp")||!0),this.showTachoExtTemp=JSON.parse(localStorage.getItem("showTachoExtTemp")||!0)}setInterfaceConfigValues(){this.colorModeObj.adjust(this.colorMode),this.interfaceBMSAutoReadConfigCalib.checked=this.autoReadBMSConfigCalib,this.interfaceWakeLock.checked=this.wakeLock,this.interfaceAveragingTimeU.value=this.averagingIntervalU,this.interfaceAveragingTimeI.value=this.averagingIntervalI,this.interfaceAveragingTimeT.value=this.averagingIntervalT,this.interfaceAveragingTimeCalib.value=this.averagingIntervalCalib,this.interfaceAveragingTimeTachoV.value=this.tachoDataAveragingIntervalV,this.interfaceAveragingTimeTachoT.value=this.tachoDataAveragingIntervalT,this.interfaceMaxValuesHoldOnTime.value=this.maxValueHoldOnTime,this.interfaceConnectionStepTimeout.value=this.connectionStepTimeout,this.interfaceBMSFilterConnection.checked=this.filterBMSConnection,this.interfaceShowBMSExtTemp.checked=this.showBMSExtTemp,this.interfaceShowBMSIntTemp.checked=this.showBMSIntTemp,this.interfaceShowMotorTemp.checked=this.showMotorTemp,this.interfaceShowTachoExtTemp.checked=this.showTachoExtTemp,this.updateTempGauges(this)}addEventListeners(){this.interfaceBMSFilterConnection.addEventListener("change",()=>{localStorage.setItem("filterBMSConnection",this.interfaceBMSFilterConnection.checked),this.updateConfig()}),this.interfaceWakeLock.addEventListener("change",()=>{localStorage.setItem("wakeLockEnabled",this.interfaceWakeLock.checked),this.updateConfig(),interfaceConfig.wakeLock?this.wakeLock1.enable():this.wakeLock1.disable()}),this.interfaceBMSAutoReadConfigCalib.addEventListener("change",()=>{localStorage.setItem("autoReadBMSConfigCalib",this.interfaceBMSAutoReadConfigCalib.checked),this.updateConfig()}),this.interfaceAveragingTimeU.addEventListener("change",()=>{localStorage.setItem("averagingIntervalU",String(parseFloat(this.interfaceAveragingTimeU.value))),this.updateConfig()}),this.interfaceAveragingTimeI.addEventListener("change",()=>{localStorage.setItem("averagingIntervalI",String(parseFloat(this.interfaceAveragingTimeI.value))),this.updateConfig()}),this.interfaceAveragingTimeT.addEventListener("change",()=>{localStorage.setItem("averagingIntervalT",String(parseFloat(this.interfaceAveragingTimeT.value))),this.updateConfig()}),this.interfaceAveragingTimeCalib.addEventListener("change",()=>{localStorage.setItem("averagingIntervalCalib",String(parseFloat(this.interfaceAveragingTimeCalib.value))),this.updateConfig()}),this.interfaceAveragingTimeTachoV.addEventListener("change",()=>{localStorage.setItem("tachoAveragingIntervalV",String(parseFloat(this.interfaceAveragingTimeTachoV.value))),this.updateConfig()}),this.interfaceAveragingTimeTachoT.addEventListener("change",()=>{localStorage.setItem("tachoAveragingIntervalT",String(parseFloat(this.interfaceAveragingTimeTachoT.value))),this.updateConfig()}),this.interfaceMaxValuesHoldOnTime.addEventListener("change",()=>{localStorage.setItem("maxValuesHoldOnTime",String(parseFloat(this.interfaceMaxValuesHoldOnTime.value))),this.updateConfig()}),this.interfaceConnectionStepTimeout.addEventListener("change",()=>{localStorage.setItem("connectionStepTimeout",String(parseFloat(this.interfaceConnectionStepTimeout.value))),this.updateConfig()}),this.interfaceShowBMSExtTemp.addEventListener("change",()=>{localStorage.setItem("showBMSExtTemp",this.interfaceShowBMSExtTemp.checked),this.updateConfig(),this.updateTempGauges()}),this.interfaceShowBMSIntTemp.addEventListener("change",()=>{localStorage.setItem("showBMSIntTemp",this.interfaceShowBMSIntTemp.checked),this.updateConfig(),this.updateTempGauges()}),this.interfaceShowMotorTemp.addEventListener("change",()=>{localStorage.setItem("showMotorTemp",this.interfaceShowMotorTemp.checked),this.updateConfig(),this.updateTempGauges()}),this.interfaceShowTachoExtTemp.addEventListener("change",()=>{localStorage.setItem("showTachoExtTemp",this.interfaceShowTachoExtTemp.checked),this.updateConfig(),this.updateTempGauges()})}colorisInit(){Coloris.init(),Coloris({theme:"polaroid"}),Coloris({el:".coloris",swatches:["#264653","#2a9d8f","#e9c46a","#f4a261","#e76f51","#d62828","#023e8a","#0077b6","#0096c7","#00b4d8","#48cae4"],focusInput:!1,selectInput:!1}),Coloris.setInstance(".foreground-color",{theme:"polaroid"}),Coloris.setInstance(".background-color",{theme:"polaroid"}),Coloris.setInstance(".accent-color",{theme:"polaroid"}),Coloris.setInstance(".capture-mode-background-color",{theme:"polaroid"})}}