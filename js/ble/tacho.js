import tachoDataProcessor from"../dataProcessing/tacho_processing";import connectionWatchDog from"../helpers/connectionWatchdog";import canBridge,{canMessage}from"../canBridge";import bleConnectionStates from"./ble";import gui from"../gui";import tachoConfig from"../settings/tacho-config";import{zoom}from"../helpers/zoom";export default class tacho extends gui{addPfuschListeners(){document.getElementById("reverse-fl").addEventListener("change",()=>{var t=document.getElementById("reverse-fl").checked,e=new canMessage;e.init(!1,104,[t]),console.log(e),this.cB.sendMessage(e)}),document.getElementById("reverse-fr").addEventListener("change",()=>{var t=document.getElementById("reverse-fr").checked,e=new canMessage;e.init(!1,105,[t]),console.log(e),this.cB.sendMessage(e)}),document.getElementById("reverse-rl").addEventListener("change",()=>{var t=document.getElementById("reverse-rl").checked,e=new canMessage;e.init(!1,112,[t]),console.log(e),this.cB.sendMessage(e)}),document.getElementById("reverse-rr").addEventListener("change",()=>{var t=document.getElementById("reverse-rr").checked,e=new canMessage;e.init(!1,113,[t]),console.log(e),this.cB.sendMessage(e)})}connectionState;gattServer;bleDevice;reconnect;#inlineDataLoggingServiceUuid="ffd70200-fe1b-4b6d-aba1-36cc0bab3e3d";#inlineDataLoggingCharacteristicUuid="ffd70201-fe1b-4b6d-aba1-36cc0bab3e3d";inlineDataLoggingCharacteristic;#inlineConfigServiceUuid="ffd70100-fe1b-4b6d-aba1-36cc0bab3e3d";#inlineConfigCharacteristicUuid="ffd70101-fe1b-4b6d-aba1-36cc0bab3e3d";inlineConfigCharacteristic;#inlineOdometerCharacteristicUuid="ffd70102-fe1b-4b6d-aba1-36cc0bab3e3d";inlineOdometerCharacteristic;#otaUpdateServiceUuid="8d53dc1d-1db7-4cd3-868b-8a527460aa84";#voltaicCanBridgeServiceUuid="ffd70300-fe1b-4b6d-aba1-36cc0bab3e3d";#canBridgeTXCharacteristicUuid="ffd70301-fe1b-4b6d-aba1-36cc0bab3e3d";#canBridgeRXConfigCharacteristicUuid="ffd70302-fe1b-4b6d-aba1-36cc0bab3e3d";#canBridgeRXStreamCharacteristicUuid="ffd70303-fe1b-4b6d-aba1-36cc0bab3e3d";canBridgeTXCharacteristic;cB;disconnectedEventAbortController;tachoDataProcessor;interfaceConfig;constructor(t,e,n,i){super(),this.connectionState=bleConnectionStates.disconnected,this.linkedBMSObj=t,this.interfaceConfig=e,this.dataLoggingMgr=n,this.deviceInfoMgr=i,this.disconnectedEventAbortController=new AbortController,this.tachoConfigObj=new tachoConfig(this),this.tachoConfigObj.addEventListeners(),this.tachoDataProcessor=new tachoDataProcessor(this,this.interfaceConfig,this.dataLoggingMgr),this.connectionWatchDog=new connectionWatchDog(1e3*this.interfaceConfig.connectionStepTimeout,()=>{console.log("[tacho connection] connection Watchdog timed out!"),this.disconnect().then()})}isConnected(){return this.connectionState===bleConnectionStates.connected}isDisconnected(){return this.connectionState===bleConnectionStates.disconnected}setServiceDoneCallback(t){this.serviceInitDoneCB=t}connect(){var t;this.isDisconnected()&&(this.setAutoconnectTachoText("Searching"),this.connectionState=bleConnectionStates.searching,t=this.#getSearchOptions(),navigator.bluetooth.requestDevice(t).then(t=>{this.connectionState!==bleConnectionStates.searching?console.log("[tacho connection] prevented from connecting two devices"):(this.resetAutoconnectTachoSilentInstant(),this.setAutoconnectTachoText("Found Device"),this.connectionState=bleConnectionStates.connecting,void 0!==this.bleDevice&&null!==this.bleDevice&&this.disconnectedEventAbortController.abort(),this.disconnectedEventAbortController=new AbortController,this.bleDevice=t,this.bleDevice.addEventListener("gattserverdisconnected",()=>{console.log("[tacho connection] disconnected"),this.isDisconnected()&&this.disconnectedEventAbortController.abort(),this.#disconnected()},{signal:this.disconnectedEventAbortController.signal}),this.setAutoconnectTachoText("Connecting Device"),this.connectionWatchDog.start(),t.gatt.connect().then(t=>{this.gattServer=t,this.#initServices(0).then()}).catch(()=>{this.connectionWatchDog.stop(),this.autoconnectTachoError(),this.#disconnected(),setTimeout(()=>{this.resetAutoconnectTachoSilentInstant()},1e3)}))}).catch(t=>{console.log("[tacho connection] User most likely cancelled: "+t),this.connectionState=bleConnectionStates.disconnected,this.autoconnectTachoError(),setTimeout(()=>{this.resetAutoconnectTachoSilentInstant()},1e3)}))}async#initServices(e){if(!this.connectionWatchDog.timedOut){this.connectionWatchDog.start();try{if(await this.gattServer.connect(),!this.connectionWatchDog.timedOut&&(console.log("[tacho connection] server connected"),this.setAutoconnectTachoText("Getting Config Service"),this.connectionWatchDog.start(),await this.#getInlineConfigServiceSeq(),!this.connectionWatchDog.timedOut&&(this.setAutoconnectTachoText("Getting Data Logging Service"),this.connectionWatchDog.start(),await this.#getInlineDataLoggingService(),!this.connectionWatchDog.timedOut))){this.setAutoconnectTachoText("Getting Can-Bridge Service"),this.connectionWatchDog.start();let e=!0;try{await this.#getCanBridgeService()}catch(t){e=!1,this.setAutoconnectTachoText("Can-Bridge Service not supported"),console.log("[Tacho canBridge] not supported: "+t)}e?(this.cB=new canBridge(this.canBridgeTXCharacteristic,this.canBridgeRXConfigCharacteristic,this.canBridgeRXStreamCharacteristic),this.addPfuschListeners()):(document.getElementById("reverse-fr").disabled=!0,document.getElementById("reverse-fl").disabled=!0,document.getElementById("reverse-rl").disabled=!0,document.getElementById("reverse-rr").disabled=!0),this.connectionWatchDog.timedOut||(this.setAutoconnectTachoText("Enabling Data Logging"),this.connectionWatchDog.start(),this.inlineDataLoggingCharacteristic.startNotifications().then(t=>{this.connectionWatchDog.timedOut||(this.connectionWatchDog.start(),this.tachoConfigObj.readInlineConfig(()=>{this.connectionWatchDog.stop(),this.setAutoconnectTachoText("Successfully connected!"),this.reconnect=!0,this.connectionState=bleConnectionStates.connected,this.linkedBMSObj.connectionState===bleConnectionStates.connecting||this.linkedBMSObj.connectionState===bleConnectionStates.searching?setTimeout(()=>{this.isConnected()&&(this.inlineConnected(),this.disableNothingConnectedOverlay())},1e3):setTimeout(()=>{this.isConnected()&&(this.inlineConnected(),this.disableNothingConnectedOverlay())},500),this.inlineDataLoggingCharacteristic.addEventListener("characteristicvaluechanged",t=>{this.tachoDataProcessor.processData(t)})}))}).catch(t=>{this.connectionWatchDog.stop(),console.log("[tacho connection] DataLogging start error: "+t),this.inlineDisconnected(),this.resetAutoconnectTacho()}))}}catch(t){this.connectionWatchDog.stop(),t instanceof DOMException?(t.toString().includes("UUID")&&(this.setAutoconnectTachoText("Not a Tacho!"),console.log("[tacho connection] Not a tacho!"),setTimeout(()=>{this.resetAutoconnectTachoSilentInstant()},1e3)),await this.disconnect()):3<e?(await this.disconnect(),this.disconnectedEventAbortController.abort(),this.resetAutoconnectTacho()):(this.setAutoconnectTachoText("Attempt #"+(e+1)),setTimeout(()=>{this.#initServices(e+1)},500))}}}#getSearchOptions(){var t={optionalServices:[this.#inlineDataLoggingServiceUuid,this.#inlineConfigServiceUuid,this.#otaUpdateServiceUuid,this.#voltaicCanBridgeServiceUuid,"device_information"]};return this.interfaceConfig.filterBMSConnection?t.filters=[{manufacturerData:[{companyIdentifier:26985}]}]:t.acceptAllDevices=!0,t}async disconnect(){this.reconnect=!1;try{await this.bleDevice.gatt.disconnect(),setTimeout(()=>{this.isDisconnected()||this.disconnect()},100)}catch(t){console.log("[tacho connection] problem while disconnecting - manually enabling overlay"),this.#disconnected(),this.connectionState=bleConnectionStates.disconnected}}#disconnected(){this.connectionWatchDog.stop(),this.connectionState=bleConnectionStates.disconnected,this.inlineDisconnected(),this.resetInlineValues(),this.linkedBMSObj.isConnected()||(zoom.out({element:this.table,padding:0,pan:!1}),this.enableNothingConnectedOverlay()),this.resetAutoconnectTachoSilentInstant(),this.reconnect&&(console.log("[auto-reconnect tacho] starting"),this.setAutoconnectTachoText("Auto-reconnect active"),this.#handleReconnect())}#handleReconnect(){this.isDisconnected()&&this.reconnect&&this.bleDevice.gatt.connect().then(async t=>{this.reconnect?(this.gattServer=t,await this.#initServices(0)):(console.log("[auto-reconnect tacho] reconnected but reconnect is off"),t.disconnect())}).catch(t=>{console.log("[auto-reconnect tacho] failed: "+t),this.#handleReconnect()})}async#getCanBridgeService(){var t=await this.gattServer.getPrimaryService(this.#voltaicCanBridgeServiceUuid);this.canBridgeTXCharacteristic=await t.getCharacteristic(this.#canBridgeTXCharacteristicUuid),this.canBridgeRXConfigCharacteristic=await t.getCharacteristic(this.#canBridgeRXConfigCharacteristicUuid),this.canBridgeRXStreamCharacteristic=await t.getCharacteristic(this.#canBridgeRXStreamCharacteristicUuid)}async#getInlineConfigServiceSeq(){var t=await this.gattServer.getPrimaryService(this.#inlineConfigServiceUuid);this.inlineConfigCharacteristic=await t.getCharacteristic(this.#inlineConfigCharacteristicUuid),this.inlineOdometerCharacteristic=await t.getCharacteristic(this.#inlineOdometerCharacteristicUuid)}async#getInlineDataLoggingService(){var t=await this.gattServer.getPrimaryService(this.#inlineDataLoggingServiceUuid);this.inlineDataLoggingCharacteristic=await t.getCharacteristic(this.#inlineDataLoggingCharacteristicUuid)}resetInlineValues(){this.tachoDataProcessor.tachoAveragingBuffer=[],this.tachoDataProcessor.maxInlineValueBuffer=[],this.tachoDataProcessor.drivenDistanceOffset=-1}}