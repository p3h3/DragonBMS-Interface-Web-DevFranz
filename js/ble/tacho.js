class tacho{connectionState;gattServer;bleDevice;reconnect;#inlineDataLoggingServiceUuid="ffd70200-fe1b-4b6d-aba1-36cc0bab3e3d";#inlineDataLoggingCharacteristicUuid="ffd70201-fe1b-4b6d-aba1-36cc0bab3e3d";inlineDataLoggingCharacteristic;#inlineConfigServiceUuid="ffd70100-fe1b-4b6d-aba1-36cc0bab3e3d";#inlineConfigCharacteristicUuid="ffd70101-fe1b-4b6d-aba1-36cc0bab3e3d";inlineConfigCharacteristic;#inlineOdometerCharacteristicUuid="ffd70102-fe1b-4b6d-aba1-36cc0bab3e3d";inlineOdometerCharacteristic;disconnectedEventAbortController;constructor(){this.connectionState=bleConnectionStates.disconnected,this.disconnectedEventAbortController=new AbortController,this.connectionWatchDog=new connectionWatchDog(1e3*interfaceConfig.connectionStepTimeout,()=>{console.log("[tacho connection] connection Watchdog timed out!"),this.disconnect()})}isConnected(){return this.connectionState===bleConnectionStates.connected}isDisconnected(){return this.connectionState===bleConnectionStates.disconnected}connect(){var t;this.isDisconnected()&&(setAutoconnectTachoText("Searching"),this.connectionState=bleConnectionStates.searching,t=this.#getSearchOptions(),navigator.bluetooth.requestDevice(t).then(t=>{this.connectionState!==bleConnectionStates.searching?console.log("[tacho connection] prevented from connecting two devices"):(resetAutoconnectTachoSilentInstant(),setAutoconnectTachoText("Found Device"),this.connectionState=bleConnectionStates.connecting,void 0!==this.bleDevice&&null!==this.bleDevice&&this.disconnectedEventAbortController.abort(),this.disconnectedEventAbortController=new AbortController,this.bleDevice=t,this.bleDevice.addEventListener("gattserverdisconnected",()=>{console.log("[tacho connection] disconnected"),this.isDisconnected()&&this.disconnectedEventAbortController.abort(),this.#disconnected()},{signal:this.disconnectedEventAbortController.signal}),setAutoconnectTachoText("Connecting Device"),this.connectionWatchDog.start(),t.gatt.connect().then(t=>{this.gattServer=t,this.#initServices(0)}).catch(()=>{this.connectionWatchDog.stop(),autoconnectTachoError(),this.#disconnected(),setTimeout(()=>{resetAutoconnectTachoSilentInstant()},1e3)}))}).catch(t=>{console.log("[tacho connection] User most likely cancelled: "+t),this.connectionState=bleConnectionStates.disconnected,autoconnectTachoError(),setTimeout(()=>{resetAutoconnectTachoSilentInstant()},1e3)}))}async#initServices(e){if(!this.connectionWatchDog.timedOut){this.connectionWatchDog.start();try{await this.gattServer.connect(),this.connectionWatchDog.timedOut||(console.log("[tacho connection] server connected"),setAutoconnectTachoText("Getting Config Service"),this.connectionWatchDog.start(),await this.#getInlineConfigServiceSeq(),this.connectionWatchDog.timedOut)||(setAutoconnectTachoText("Getting Data Logging Service"),this.connectionWatchDog.start(),await this.#getInlineDataLoggingService(),this.connectionWatchDog.timedOut)||(setAutoconnectTachoText("Enabling Data Logging"),this.connectionWatchDog.start(),this.inlineDataLoggingCharacteristic.startNotifications().then(t=>{this.connectionWatchDog.timedOut||(this.connectionWatchDog.start(),readInlineConfig(),this.connectionWatchDog.stop(),setAutoconnectTachoText("Successfully connected!"),this.reconnect=!0,this.connectionState=bleConnectionStates.connected,bmsObj.connectionState===bleConnectionStates.connecting||bmsObj.connectionState===bleConnectionStates.searching?setTimeout(()=>{this.isConnected()&&(inlineConnected(),disableNothingConnectedOverlay())},1e3):setTimeout(()=>{this.isConnected()&&(inlineConnected(),disableNothingConnectedOverlay())},500),this.inlineDataLoggingCharacteristic.addEventListener("characteristicvaluechanged",processTachoData))}).catch(t=>{this.connectionWatchDog.stop(),console.log("[tacho connection] DataLogging start error: "+t),inlineDisconnected(),resetAutoconnectTacho()}))}catch(t){this.connectionWatchDog.stop(),t instanceof DOMException?(t.toString().includes("UUID")&&(setAutoconnectTachoText("Not a Tacho!"),console.log("[tacho connection] Not a tacho!"),setTimeout(()=>{resetAutoconnectTachoSilentInstant()},1e3)),await this.disconnect()):3<e?(await this.disconnect(),this.disconnectedEventAbortController.abort(),resetAutoconnectTacho()):(setAutoconnectTachoText("Attempt #"+(e+1)),setTimeout(()=>{this.#initServices(e+1)},500))}}}#getSearchOptions(){var t={optionalServices:[this.#inlineDataLoggingServiceUuid,this.#inlineConfigServiceUuid,"device_information"]};return interfaceConfig.filterBMSConnection?t.filters=[{manufacturerData:[{companyIdentifier:26985}]}]:t.acceptAllDevices=!0,t}async disconnect(){this.reconnect=!1;try{await this.bleDevice.gatt.disconnect(),setTimeout(()=>{this.isDisconnected()||this.disconnect()},100)}catch(t){console.log("[tacho connection] problem while disconnecting - manually enabling overlay"),this.#disconnected(),this.connectionState=bleConnectionStates.disconnected}}#disconnected(){this.connectionWatchDog.stop(),this.connectionState=bleConnectionStates.disconnected,inlineDisconnected(),resetInlineValues(),bmsObj.isConnected()||(zoom.out({element:table,padding:0,pan:!1}),enableNothingConnectedOverlay()),resetAutoconnectTachoSilentInstant(),this.reconnect&&(console.log("[auto-reconnect tacho] starting"),setAutoconnectTachoText("Auto-reconnect active"),this.#handleReconnect())}#handleReconnect(){this.isDisconnected()&&this.reconnect&&this.bleDevice.gatt.connect().then(async t=>{this.reconnect?(this.gattServer=t,await this.#initServices(0)):(console.log("[auto-reconnect tacho] reconnected but reconnect is off"),t.disconnect())}).catch(t=>{console.log("[auto-reconnect tacho] failed: "+t),this.#handleReconnect()})}async#getInlineConfigServiceSeq(){var t=await this.gattServer.getPrimaryService(this.#inlineConfigServiceUuid);this.inlineConfigCharacteristic=await t.getCharacteristic(this.#inlineConfigCharacteristicUuid),this.inlineOdometerCharacteristic=await t.getCharacteristic(this.#inlineOdometerCharacteristicUuid)}async#getInlineDataLoggingService(){var t=await this.gattServer.getPrimaryService(this.#inlineDataLoggingServiceUuid);this.inlineDataLoggingCharacteristic=await t.getCharacteristic(this.#inlineDataLoggingCharacteristicUuid)}}let tachoObj=new tacho;