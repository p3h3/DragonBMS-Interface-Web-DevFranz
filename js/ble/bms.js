import bmsDataProcessor from"../dataProcessing/bms_processing";import bmsCalib from"../settings/board-calib";import bmsConfig from"../settings/board-config";import sf from"../helpers/small_functions";import gui from"../gui";import bleConnectionStates from"./ble";import{zoom}from"../helpers/zoom";import connectionWatchDog from"../helpers/connectionWatchdog";export default class bms extends gui{connectionState;gattServer;bleDevice;tachoObj;reconnect;name;switchType;channelCount;modelNumber;hardwareRevision;firmwareRevision;serialNumber;alertBuffer;warningBuffer;#dataLoggingServiceUuid="e9ea0200-e19b-482d-9293-c7907585fc48";#dataLoggingCharacteristicUuid="e9ea0201-e19b-482d-9293-c7907585fc48";dataLoggingCharacteristic;#configServiceUuid="e9ea0100-e19b-482d-9293-c7907585fc48";#configCharacteristicUuid="e9ea0101-e19b-482d-9293-c7907585fc48";bmsConfigCharacteristic;#calibCharacteristicUuid="e9ea0102-e19b-482d-9293-c7907585fc48";calibCharacteristic;#deviceNameSetCharacteristicUuid="e9ea0103-e19b-482d-9293-c7907585fc48";deviceNameCharacteristic;#developmentServiceUuid="e9ea0400-e19b-482d-9293-c7907585fc48";#prechargeControlCharacteristicUuid="e9ea0403-e19b-482d-9293-c7907585fc48";prechargeControlCharacteristic;#channelControlCharacteristicUuid="e9ea0401-e19b-482d-9293-c7907585fc48";channelControlCharacteristic;#uptimeCharacteristicUuid="e9ea0404-e19b-482d-9293-c7907585fc48";uptimeCharacteristic;#runtimeControlServiceUuid="e9ea0500-e19b-482d-9293-c7907585fc48";#turnOnCharacteristicUuid="e9ea0503-e19b-482d-9293-c7907585fc48";turnOnCharacteristic;#shutdownControlCharacteristicUuid="e9ea0502-e19b-482d-9293-c7907585fc48";shutdownControlCharacteristic;#userGPOCharacteristicUuid="e9ea0501-e19b-482d-9293-c7907585fc48";userGPOCharacteristic;#alertWarningServiceUuid="e9ea0300-e19b-482d-9293-c7907585fc48";#warningCharacteristicUuid="e9ea0301-e19b-482d-9293-c7907585fc48";warningCharacteristic;#alertCharacteristicUuid="e9ea0302-e19b-482d-9293-c7907585fc48";alertCharacteristic;#otaUpdateServiceUuid="8d53dc1d-1db7-4cd3-868b-8a527460aa84";disconnectedEventAbortController;connectionWatchDog;stateMachineState;bmsConfigObj;bmsCalibObj;#lastUptime=0;#countingUptime=0;constructor(t,e,i){super(),this.interfaceConfig=t,this.dataLoggingMgr=e,this.deviceInfoMgr=i,this.connectionState=bleConnectionStates.disconnected,this.reconnect=!1,this.disconnectedEventAbortController=new AbortController,this.bmsConfigObj=new bmsConfig(this,!0),this.bmsConfigObj.addEventListeners(),this.bmsCalibObj=new bmsCalib(this),this.bmsDataProcessor=new bmsDataProcessor(this.bmsConfigObj,this.bmsCalibObj,this.interfaceConfig,this.dataLoggingMgr),this.pollFaults(),this.#pollUptime(!0),this.#setUptime(),this.connectionWatchDog=new connectionWatchDog(1e3*this.interfaceConfig.connectionStepTimeout,()=>{console.log("[bms connection] connection Watchdog timed out!"),this.disconnect(!1).then()})}initDataDistribution(t){this.dd=t,this.bmsDataProcessor.gatherer.initDataDistribution(this.dd),this.bmsDataProcessor.initDataDistribution(this.dd)}setServiceDoneCallback(t){this.serviceInitDoneCB=t}initTachoObj(t){this.tachoObj=t}isConnected(){return this.connectionState===bleConnectionStates.connected}isDisconnected(){return this.connectionState===bleConnectionStates.disconnected}async initServices(e){if(!this.connectionWatchDog.timedOut){this.connectionWatchDog.start();try{if(await this.gattServer.connect(),console.log("[bms connection] server connected"),this.setAutoconnectBMSText("Getting Runtime Services"),this.connectionWatchDog.timedOut)return;if(this.connectionWatchDog.start(),await this.#getDevelopmentServiceSeq(),this.connectionWatchDog.timedOut)return;if(this.connectionWatchDog.start(),this.setAutoconnectBMSText("Getting Services"),await this.#getRuntimeControlServiceSeq(),this.connectionWatchDog.timedOut)return;if(this.connectionWatchDog.start(),this.setAutoconnectBMSText("Getting Config Service"),await this.#getBMSConfigServiceSeq(),this.connectionWatchDog.timedOut)return;if(this.connectionWatchDog.start(),this.setAutoconnectBMSText("Getting Alert Service"),await this.#getBMSAlertServiceSeq(),this.connectionWatchDog.timedOut)return;if(this.connectionWatchDog.start(),await this.#getDeviceInfoSeq(),this.connectionWatchDog.timedOut)return;this.connectionWatchDog.start(),await this.getDeviceName()}catch(t){return(this.connectionWatchDog.stop(),console.log(t),t instanceof DOMException&&(t.toString().includes("UUID")&&(this.setAutoconnectBMSText("Not a BMS!"),console.log("[bms connection] Not a BMS!"),setTimeout(()=>{this.resetAutoconnectBMSSilentInstant()},1e3)),!t.toString().toLowerCase().includes("unknown")||t.toString().toLowerCase().includes("disconnected")))?void await this.disconnect(!1):3<e?(await this.disconnect(!0),this.disconnectedEventAbortController.abort(),void this.resetAutoconnectBMS()):(this.setAutoconnectBMSText("Attempt #"+(e+1)),void setTimeout(()=>{this.initServices(e+1)},500))}try{this.interfaceConfig.autoReadBMSConfigCalib?(this.setAutoconnectBMSText("Reading Config&Calib"),console.log("[bms connection] auto-reading bms config/calib"),this.connectionWatchDog.timedOut||(this.connectionWatchDog.start(),this.bmsCalibObj.readBMSCalib(()=>{this.connectionWatchDog.timedOut||(this.connectionWatchDog.start(),this.bmsConfigObj.readBMSConfig(async()=>{this.connectionWatchDog.timedOut||(this.connectionWatchDog.start(),await this.#getBMSDataloggingServiceSeq(),this.#serviceInitDone())}))}))):this.connectionWatchDog.timedOut||(this.connectionWatchDog.start(),await this.#getBMSDataloggingServiceSeq(),this.#serviceInitDone())}catch(t){this.connectionWatchDog.stop(),t instanceof DOMException&&(console.log(t),t.toString().includes("UUID")&&(this.setAutoconnectBMSText("Not a BMS!"),console.log("[bms connection] Not a BMS!"),setTimeout(()=>{this.resetAutoconnectBMSSilentInstant()},1e3)),!t.toString().toLowerCase().includes("unknown"))?await this.disconnect(!1):3<e?(await this.disconnect(!0),this.disconnectedEventAbortController.abort(),this.resetAutoconnectBMS()):(this.setAutoconnectBMSText("Attempt #"+(e+1)),setTimeout(()=>{this.initServices(e+1)},500))}}}#serviceInitDone(){this.connectionWatchDog.stop(),console.log("[bms connection] got data logging"),this.reconnect=!0,this.connectionState=bleConnectionStates.connected,this.bmsDataProcessor=new bmsDataProcessor(this.bmsConfigObj,this.bmsCalibObj,this.interfaceConfig,this.dataLoggingMgr),this.bmsDataProcessor.gatherer.initDataDistribution(this.dd),this.bmsDataProcessor.initDataDistribution(this.dd),void 0!==this.serviceInitDoneCB&&null!==this.serviceInitDoneCB&&this.serviceInitDoneCB(),setTimeout(()=>{this.isConnected()&&(this.enableBoardGauges(),this.disableNothingConnectedOverlay(),this.tachoObj.isDisconnected()||zoom.to({element:this.table,padding:0,pan:!1}))},1e3)}sendChannelControlData(t,e,i,n){e=e?130:128;e=i?4|e:251&e,this.channelControlCharacteristic.writeValueWithoutResponse(Uint8Array.from([n?8|e:247&e]).buffer).then()}connect(){var t;this.connectionState===bleConnectionStates.disconnected&&(this.setAutoconnectBMSText("Searching"),this.connectionState=bleConnectionStates.searching,t=this.#getSearchOptions(),navigator.bluetooth.requestDevice(t).then(t=>{this.connectionState!==bleConnectionStates.searching?console.log("[bms connection] prevented from connecting two devices"):(this.resetAutoconnectBMSSilentInstant(),this.setAutoconnectBMSText("Found Device"),this.connectionState=bleConnectionStates.connecting,void 0!==this.bleDevice&&null!==this.bleDevice&&this.disconnectedEventAbortController.abort(),this.disconnectedEventAbortController=new AbortController,this.bleDevice=t,this.bleDevice.addEventListener("gattserverdisconnected",()=>{console.log("[bms connection] disconnected"),this.isDisconnected()&&this.disconnectedEventAbortController.abort(),this.#disconnected()},{signal:this.disconnectedEventAbortController.signal}),this.setAutoconnectBMSText("Connecting Device"),this.connectionWatchDog.start(),this.bleDevice.gatt.connect().then(t=>{this.gattServer=t,this.initServices(0).then()}).catch(()=>{this.connectionWatchDog.stop(),this.#disconnected(),this.autoConnectBMSError(),setTimeout(()=>{this.resetAutoconnectBMSSilentInstant()},1e3)}))}).catch(t=>{console.log("[bms connection] User most likely cancelled: "+t),this.connectionState=bleConnectionStates.disconnected,this.autoConnectBMSError(),setTimeout(()=>{this.resetAutoconnectBMSSilentInstant()},1e3)}))}#getSearchOptions(){var t={optionalServices:[this.#dataLoggingServiceUuid,this.#developmentServiceUuid,this.#configServiceUuid,this.#alertWarningServiceUuid,this.#runtimeControlServiceUuid,this.#otaUpdateServiceUuid,"device_information"]};return this.interfaceConfig.filterBMSConnection?t.filters=[{manufacturerData:[{companyIdentifier:26985}]}]:t.acceptAllDevices=!0,t}async disconnect(t){t&&(this.reconnect=!1);try{this.bleDevice.gatt.disconnect(),setTimeout(()=>{this.isDisconnected()||this.disconnect()},100)}catch(t){console.log("[bms connection] problem while disconnecting - manually enabling overlay"),this.#disconnected(),this.connectionState=bleConnectionStates.disconnected}}#disconnected(){this.connectionWatchDog.stop(),this.connectionState=bleConnectionStates.disconnected,this.disableBoardGauges(),this.resetBMSValues(),this.tachoObj.isConnected()||this.enableNothingConnectedOverlay(),this.resetAutoconnectBMSSilentInstant(),this.reconnect&&(this.setAutoconnectBMSText("Auto-reconnect active"),this.#handleReconnect())}#handleReconnect(){this.isDisconnected()&&this.reconnect&&(console.log("[auto-reconnect bms] starting connect attempt"),this.bleDevice.gatt.connect().then(async t=>{this.reconnect?(this.gattServer=t,await this.initServices(0)):(console.log("[auto-reconnect bms] reconnected but reconnect is off"),t.disconnect())}).catch(t=>{console.log("[auto-reconnect bms] failed: "+t),this.#handleReconnect()}))}#updateDeviceInfo(t){t.modelNumber.toLowerCase().includes("relay")?t.switchType="relay":t.modelNumber.toLowerCase().includes("mosfet")?t.switchType="mosfet":t.switchType="unknown",t.modelNumber.toLowerCase().includes("single")?t.channelCount=1:t.modelNumber.toLowerCase().includes("double")?t.channelCount=2:t.modelNumber.toLowerCase().includes("triple")&&(t.channelCount=3),this.deviceInfoMgr.devicesInfo.updateDeviceInfo("BMS",t),this.#checkFWUpdate(t),"not supported"!==t.modelNumber&&("relay"===t.switchType&&this.#setRelaisSpecificLabels(),"mosfet"===t.switchType)&&this.#setMosfetSpecificLabels()}#setRelaisSpecificLabels(){sf.setValueTexts(this.bmsPrechargeTempLabels,"BMS-Extern Temp:"),sf.setValueTexts(this.bmsMaxPrechargeTempLabels,"max BMS<br>Extern Temp:")}#setMosfetSpecificLabels(){sf.setValueTexts(this.bmsPrechargeTempLabels,"BMS-Precharge<br>Temp:"),sf.setValueTexts(this.bmsMaxPrechargeTempLabels,"max Precharge<br>Temp:")}#checkFWUpdate(e){try{fetch("https://api.github.com/repos/Dev-Voltaic/Voltaic_BMS/releases/latest").then(t=>{t.text().then(t=>{t=JSON.parse(t).tag_name;e.firmwareRevision!==t&&(this.firmwareUpdateText.innerHTML="<a href='https://github.com/Dev-Voltaic/Voltaic_BMS'>Newest Firmware Version is: "+t+"<br>Have you considered updating</a>?",this.firmwareUpdateText.classList.add("fault"),this.firmwareUpdateText.classList.remove("hidden"))})})}catch(t){t instanceof TypeError&&(this.firmwareUpdateText.innerHTML="Failed to get remote version info")}}async#getDeviceInfoSeq(){let e=new TextDecoder("utf-8");var t=await this.gattServer.getPrimaryService("device_information");let i={};await t.getCharacteristic(BluetoothUUID.getCharacteristic("hardware_revision_string")).then(async t=>{await t.readValue().then(t=>{i.hardwareRevision=e.decode(t)})}),await t.getCharacteristic(BluetoothUUID.getCharacteristic("firmware_revision_string")).then(async t=>{await t.readValue().then(t=>{i.firmwareRevision=e.decode(t)})}),await t.getCharacteristic(BluetoothUUID.getCharacteristic("model_number_string")).then(async t=>{await t.readValue().then(t=>{i.modelNumber=e.decode(t)})}).catch(()=>{i.modelNumber="not supported"}),await t.getCharacteristic(BluetoothUUID.getCharacteristic("software_revision_string")).then(async t=>{await t.readValue().then(t=>{i.serialNumber=e.decode(t)})}).catch(()=>{i.serialNumber="not supported"}),this.#updateDeviceInfo(i)}async#getDevelopmentServiceSeq(){var t=await this.gattServer.getPrimaryService(this.#developmentServiceUuid);this.prechargeControlCharacteristic=await t.getCharacteristic(this.#prechargeControlCharacteristicUuid),this.channelControlCharacteristic=await t.getCharacteristic(this.#channelControlCharacteristicUuid),this.uptimeCharacteristic=await t.getCharacteristic(this.#uptimeCharacteristicUuid)}async#getRuntimeControlServiceSeq(){var t=await this.gattServer.getPrimaryService(this.#runtimeControlServiceUuid);this.shutdownControlCharacteristic=await t.getCharacteristic(this.#shutdownControlCharacteristicUuid),this.turnOnCharacteristic=await t.getCharacteristic(this.#turnOnCharacteristicUuid),this.userGPOCharacteristic=await t.getCharacteristic(this.#userGPOCharacteristicUuid)}async#getBMSConfigServiceSeq(){var t=await this.gattServer.getPrimaryService(this.#configServiceUuid);this.bmsConfigCharacteristic=await t.getCharacteristic(this.#configCharacteristicUuid),this.calibCharacteristic=await t.getCharacteristic(this.#calibCharacteristicUuid),t.getCharacteristic(this.#deviceNameSetCharacteristicUuid).then(t=>{this.deviceNameCharacteristic=t}).catch(()=>{console.log("older firmware - no device name write support")})}async getDeviceName(){var t;void 0!==this.deviceNameCharacteristic&&(t=new TextDecoder("utf-8"),this.name=t.decode(await this.deviceNameCharacteristic.readValue()),void 0===this.name?sf.setValueValues(this.deviceNameFields,"too old firmware"):sf.setValueValues(this.deviceNameFields,this.name))}async#getBMSAlertServiceSeq(){var t=await this.gattServer.getPrimaryService(this.#alertWarningServiceUuid);this.warningCharacteristic=await t.getCharacteristic(this.#warningCharacteristicUuid),await this.warningCharacteristic.startNotifications(),this.warningCharacteristic.addEventListener("characteristicvaluechanged",this.#handleWarningIndication),this.alertCharacteristic=await t.getCharacteristic(this.#alertCharacteristicUuid),await this.alertCharacteristic.startNotifications(),this.alertCharacteristic.addEventListener("characteristicvaluechanged",this.#handleAlertIndication)}async#getBMSDataloggingServiceSeq(){var t=await this.gattServer.getPrimaryService(this.#dataLoggingServiceUuid);this.dataLoggingCharacteristic=await t.getCharacteristic(this.#dataLoggingCharacteristicUuid),this.setAutoconnectBMSText("Enabling Datalogging"),await this.dataLoggingCharacteristic.startNotifications(),this.setAutoconnectBMSText("Successfully connected!"),this.dataLoggingCharacteristic.addEventListener("characteristicvaluechanged",t=>{this.bmsDataProcessor.processData(t)})}async pauseDataLogging(){await this.dataLoggingCharacteristic.stopNotifications()}async unPauseDataLogging(){await this.dataLoggingCharacteristic.startNotifications()}#handleWarningIndication(t){t=t.target.value;this.warningBuffer=t.getUint8(3)<<24|t.getUint8(2)<<16|t.getUint8(1)<<8|t.getUint8(0)}#handleAlertIndication(t){t=t.target.value;this.alertBuffer=t.getUint8(3)<<24|t.getUint8(2)<<16|t.getUint8(1)<<8|t.getUint8(0)}pollFaults(){this.bmsDataProcessor.isInitialised()&&(4===this.bmsDataProcessor.stateMachineState&&this.isConnected()?(this.alertCharacteristic.readValue().then(t=>{this.alertBuffer=t.getUint8(3)<<24|t.getUint8(2)<<16|t.getUint8(1)<<8|t.getUint8(0)}),this.warningCharacteristic.readValue().then(t=>{this.warningBuffer=t.getUint8(3)<<24|t.getUint8(2)<<16|t.getUint8(1)<<8|t.getUint8(0)})):(this.alertBuffer=0,this.warningBuffer=0),this.updateWarningFields(this.warningBuffer,this.alertBuffer)),setTimeout(()=>{this.pollFaults()},500)}#pollUptime(t){if(this.isConnected())try{this.uptimeCharacteristic.readValue().then(t=>{t=sf.handleSignedBullshit64(t.getUint8(7)<<56|t.getUint8(6)<<48|t.getUint8(5)<<40|t.getUint8(4)<<32|t.getUint8(3)<<24|t.getUint8(2)<<16|t.getUint8(1)<<8|t.getUint8(0));this.#lastUptime=-t,this.#countingUptime=0})}catch(t){}t&&setTimeout(()=>{this.#pollUptime(!0)},15e3)}#setUptime(){this.isConnected()&&(0===this.#lastUptime?this.#pollUptime(!1):(this.#countingUptime+=1e3,this.setOnTime(Math.floor((this.#lastUptime+this.#countingUptime)/1e3)))),setTimeout(()=>{this.#setUptime()},1e3)}clearAlerts(e,t){10!==e&&this.alertCharacteristic.writeValue(Uint8Array.from([0]).buffer).then(()=>{this.updateWarningFields(this.warningBuffer,this.alertBuffer)}).catch(t=>{setTimeout(()=>{this.clearAlerts(e+1,t)},100)})}resetBMSValues(){this.bmsDataProcessor.remainingEnergy1=0,this.bmsDataProcessor.remainingEnergy2=0,this.bmsDataProcessor.remainingEnergy3=0,this.alertBuffer=0,this.warningBuffer=0,this.updateWarningFields(this.warningBuffer,this.alertBuffer),this.bmsDataProcessor.bmsAveragingBuffer=[],this.setOnTime(0),this.bmsDataProcessor.maxValueBuffer=[],this.hideAllSettings()}}