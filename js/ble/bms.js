class connectionWatchDog{timeout;timeoutAction;startTime;enabled;timedOut;constructor(t,e){this.timeout=t,this.timeoutAction=e,this.timedOut=!1}start(){this.startTime=Date.now(),this.enabled=!0,this.timedOut=!1,setTimeout(()=>{!this.enabled||Date.now()-this.startTime<this.timeout||(this.startTime=Date.now(),this.timedOut=!0,this.timeoutAction())},this.timeout)}stop(){this.enabled=!1}}class bms{connectionState;gattServer;bleDevice;reconnect;name;switchType;channelCount;modelNumber;hardwareRevision;firmwareRevision;serialNumber;#dataLoggingServiceUuid="e9ea0200-e19b-482d-9293-c7907585fc48";#dataLoggingCharacteristicUuid="e9ea0201-e19b-482d-9293-c7907585fc48";dataLoggingCharacteristic;#configServiceUuid="e9ea0100-e19b-482d-9293-c7907585fc48";#configCharacteristicUuid="e9ea0101-e19b-482d-9293-c7907585fc48";bmsConfigCharacteristic;#calibCharacteristicUuid="e9ea0102-e19b-482d-9293-c7907585fc48";calibCharacteristic;#deviceNameSetCharacteristicUuid="e9ea0103-e19b-482d-9293-c7907585fc48";deviceNameCharacteristic;#developmentServiceUuid="e9ea0400-e19b-482d-9293-c7907585fc48";#prechargeControlCharacteristicUuid="e9ea0403-e19b-482d-9293-c7907585fc48";prechargeControlCharacteristic;#channelControlCharacteristicUuid="e9ea0401-e19b-482d-9293-c7907585fc48";channelControlCharacteristic;#uptimeCharacteristicUuid="e9ea0404-e19b-482d-9293-c7907585fc48";uptimeCharacteristic;#runtimeControlServiceUuid="e9ea0500-e19b-482d-9293-c7907585fc48";#turnOnCharacteristicUuid="e9ea0503-e19b-482d-9293-c7907585fc48";turnOnCharacteristic;#shutdownControlCharacteristicUuid="e9ea0502-e19b-482d-9293-c7907585fc48";shutdownControlCharacteristic;#userGPOCharacteristicUuid="e9ea0501-e19b-482d-9293-c7907585fc48";userGPOCharacteristic;#alertWarningServiceUuid="e9ea0300-e19b-482d-9293-c7907585fc48";#warningCharacteristicUuid="e9ea0301-e19b-482d-9293-c7907585fc48";warningCharacteristic;#alertCharacteristicUuid="e9ea0302-e19b-482d-9293-c7907585fc48";alertCharacteristic;disconnectedEventAbortController;connectionWatchDog;constructor(){this.connectionState=bleConnectionStates.disconnected,this.reconnect=!1,this.disconnectedEventAbortController=new AbortController,this.pollFaults(),this.connectionWatchDog=new connectionWatchDog(1e3*interfaceConfig.connectionStepTimeout,()=>{console.log("[bms connection] connection Watchdog timed out!"),this.disconnect(!1)})}isConnected(){return this.connectionState===bleConnectionStates.connected}isDisconnected(){return this.connectionState===bleConnectionStates.disconnected}async initServices(e){if(!this.connectionWatchDog.timedOut){this.connectionWatchDog.start();try{if(await this.gattServer.connect(),console.log("[bms connection] server connected"),setAutoconnectBMSText("Getting Runtime Services"),this.connectionWatchDog.timedOut)return;if(this.connectionWatchDog.start(),await this.#getDevelopmentServiceSeq(),this.connectionWatchDog.timedOut)return;if(this.connectionWatchDog.start(),setAutoconnectBMSText("Getting Services"),await this.#getRuntimeControlServiceSeq(),this.connectionWatchDog.timedOut)return;if(this.connectionWatchDog.start(),setAutoconnectBMSText("Getting Config Service"),await this.#getBMSConfigServiceSeq(),this.connectionWatchDog.timedOut)return;if(this.connectionWatchDog.start(),setAutoconnectBMSText("Getting Alert Service"),await this.#getBMSAlertServiceSeq(),this.connectionWatchDog.timedOut)return;if(this.connectionWatchDog.start(),await this.#getDeviceInfoSeq(),this.connectionWatchDog.timedOut)return;this.connectionWatchDog.start(),await this.getDeviceName()}catch(t){return(this.connectionWatchDog.stop(),console.log(t),t instanceof DOMException&&(t.toString().includes("UUID")&&(setAutoconnectBMSText("Not a BMS!"),console.log("[bms connection] Not a BMS!"),setTimeout(()=>{resetAutoconnectBMSSilentInstant()},1e3)),!t.toString().toLowerCase().includes("unknown")))?void await this.disconnect(!1):3<e?(await this.disconnect(!0),this.disconnectedEventAbortController.abort(),void resetAutoconnectBMS()):(setAutoconnectBMSText("Attempt #"+(e+1)),void setTimeout(()=>{this.initServices(e+1)},500))}try{interfaceConfig.autoReadBMSConfigCalib?(setAutoconnectBMSText("Reading Config&Calib"),console.log("[bms connection] auto-reading bms config/calib"),this.connectionWatchDog.timedOut||(this.connectionWatchDog.start(),readBMSCalib(()=>{this.connectionWatchDog.timedOut||(this.connectionWatchDog.start(),readBMSConfig(async()=>{this.connectionWatchDog.timedOut||(this.connectionWatchDog.start(),await this.#getBMSDataloggingServiceSeq(),this.#serviceInitDone())}))}))):this.connectionWatchDog.timedOut||(this.connectionWatchDog.start(),await this.#getBMSDataloggingServiceSeq(),this.#serviceInitDone())}catch(t){this.connectionWatchDog.stop(),t instanceof DOMException&&(console.log(t),t.toString().includes("UUID")&&(setAutoconnectBMSText("Not a BMS!"),console.log("[bms connection] Not a BMS!"),setTimeout(()=>{resetAutoconnectBMSSilentInstant()},1e3)),!t.toString().toLowerCase().includes("unknown"))?await this.disconnect(!1):3<e?(await this.disconnect(!0),this.disconnectedEventAbortController.abort(),resetAutoconnectBMS()):(setAutoconnectBMSText("Attempt #"+(e+1)),setTimeout(()=>{this.initServices(e+1)},500))}}}#serviceInitDone(){this.connectionWatchDog.stop(),console.log("[bms connection] got data logging"),this.reconnect=!0,this.connectionState=bleConnectionStates.connected,setTimeout(()=>{this.isConnected()&&(enableBoardGauges(),disableNothingConnectedOverlay(),tachoObj.isDisconnected()||zoom.to({element:table,padding:0,pan:!1}))},1e3)}sendChannelControlData(t,e,i,n){e=e?130:128;e=i?4|e:251&e,this.channelControlCharacteristic.writeValueWithoutResponse(Uint8Array.from([n?8|e:247&e]).buffer)}connect(){var t;this.connectionState===bleConnectionStates.disconnected&&(setAutoconnectBMSText("Searching"),this.connectionState=bleConnectionStates.searching,t=this.#getSearchOptions(),navigator.bluetooth.requestDevice(t).then(t=>{this.connectionState!==bleConnectionStates.searching?console.log("[bms connection] prevented from connecting two devices"):(resetAutoconnectBMSSilentInstant(),setAutoconnectBMSText("Found Device"),this.connectionState=bleConnectionStates.connecting,void 0!==this.bleDevice&&null!==this.bleDevice&&this.disconnectedEventAbortController.abort(),this.disconnectedEventAbortController=new AbortController,this.bleDevice=t,this.bleDevice.addEventListener("gattserverdisconnected",()=>{console.log("[bms connection] disconnected"),this.isDisconnected()&&this.disconnectedEventAbortController.abort(),this.#disconnected()},{signal:this.disconnectedEventAbortController.signal}),setAutoconnectBMSText("Connecting Device"),this.connectionWatchDog.start(),this.bleDevice.gatt.connect().then(t=>{this.gattServer=t,this.initServices(0)}).catch(()=>{this.connectionWatchDog.stop(),this.#disconnected(),autoConnectBMSError(),setTimeout(()=>{resetAutoconnectBMSSilentInstant()},1e3)}))}).catch(t=>{console.log("[bms connection] User most likely cancelled: "+t),this.connectionState=bleConnectionStates.disconnected,autoConnectBMSError(),setTimeout(()=>{resetAutoconnectBMSSilentInstant()},1e3)}))}#getSearchOptions(){var t={optionalServices:[this.#dataLoggingServiceUuid,this.#developmentServiceUuid,this.#configServiceUuid,this.#alertWarningServiceUuid,this.#runtimeControlServiceUuid,"device_information"]};return interfaceConfig.filterBMSConnection?t.filters=[{manufacturerData:[{companyIdentifier:26985}]}]:t.acceptAllDevices=!0,t}async disconnect(t){t&&(this.reconnect=!1);try{this.bleDevice.gatt.disconnect(),setTimeout(()=>{this.isDisconnected()||this.disconnect()},100)}catch(t){console.log("[bms connection] problem while disconnecting - manually enabling overlay"),this.#disconnected(),this.connectionState=bleConnectionStates.disconnected}}#disconnected(){this.connectionWatchDog.stop(),this.connectionState=bleConnectionStates.disconnected,disableBoardGauges(),resetBMSValues(),tachoObj.isConnected()||enableNothingConnectedOverlay(),resetAutoconnectBMSSilentInstant(),this.reconnect&&(setAutoconnectBMSText("Auto-reconnect active"),this.#handleReconnect())}#handleReconnect(){this.isDisconnected()&&this.reconnect&&(console.log("[auto-reconnect bms] starting connect attempt"),this.bleDevice.gatt.connect().then(async t=>{this.reconnect?(this.gattServer=t,await this.initServices(0)):(console.log("[auto-reconnect bms] reconnected but reconnect is off"),t.disconnect())}).catch(t=>{console.log("[auto-reconnect bms] failed: "+t),this.#handleReconnect()}))}#updateDeviceInfo(){this.modelNumber.toLowerCase().includes("relay")?this.switchType="relay":this.modelNumber.toLowerCase().includes("mosfet")?this.switchType="mosfet":this.switchType="unknown",(this.modelNumber.toLowerCase().includes("single")||this.modelNumber.toLowerCase().includes("double")||this.modelNumber.toLowerCase().includes("triple"))&&(this.channelCount=1),this.#setDeviceInfoFields()}#checkFWUpdate(){fetch("https://api.github.com/repos/Dev-Voltaic/Voltaic_BMS_Firmware/releases/latest").then(t=>{t.text().then(t=>{t=JSON.parse(t).tag_name;this.firmwareRevision!==t&&(firmwareUpdateText.innerHTML="<a href='https://github.com/Dev-Voltaic/Voltaic_BMS_Firmware'>Newest Firmware Version is: "+t+"<br>Have you considered updating</a>?",firmwareUpdateText.classList.add("fault"),firmwareUpdateText.classList.remove("hidden"))})})}#setDeviceInfoFields(){setValueTexts(bmsModelFields,this.modelNumber),setValueTexts(bmsHardwareRevisionFields,this.hardwareRevision),setValueTexts(bmsFirmwareRevisionFields,this.firmwareRevision),setValueTexts(bmsSerialNumberFields,this.serialNumber),this.#checkFWUpdate(),"not supported"===this.serialNumber&&classListValueTextsAdd(bmsSerialNumberFields,"fault"),"not supported"===this.modelNumber?classListValueTextsAdd(bmsModelFields,"fault"):("relay"===this.switchType&&this.#setRelaisSpecificLabels(),"mosfet"===this.switchType&&this.#setMosfetSpecificLabels())}#setRelaisSpecificLabels(){setValueTexts(bmsPrechargeTempLabels,"BMS-Extern Temp:"),setValueTexts(bmsMaxPrechargeTempLabels,"max BMS<br>Extern Temp:")}#setMosfetSpecificLabels(){setValueTexts(bmsPrechargeTempLabels,"BMS-Precharge<br>Temp:"),setValueTexts(bmsMaxPrechargeTempLabels,"max Precharge<br>Temp:")}async#getDeviceInfoSeq(){let e=new TextDecoder("utf-8");var t=await this.gattServer.getPrimaryService("device_information");await t.getCharacteristic(BluetoothUUID.getCharacteristic("hardware_revision_string")).then(async t=>{await t.readValue().then(t=>{this.hardwareRevision=e.decode(t)})}),await t.getCharacteristic(BluetoothUUID.getCharacteristic("firmware_revision_string")).then(async t=>{await t.readValue().then(t=>{this.firmwareRevision=e.decode(t)})}),await t.getCharacteristic(BluetoothUUID.getCharacteristic("model_number_string")).then(async t=>{await t.readValue().then(t=>{this.modelNumber=e.decode(t)})}).catch(()=>{this.modelNumber="not supported"}),await t.getCharacteristic(BluetoothUUID.getCharacteristic("software_revision_string")).then(async t=>{await t.readValue().then(t=>{this.serialNumber=e.decode(t)})}).catch(()=>{this.serialNumber="not supported"}),this.#updateDeviceInfo()}async#getDevelopmentServiceSeq(){var t=await this.gattServer.getPrimaryService(this.#developmentServiceUuid);this.prechargeControlCharacteristic=await t.getCharacteristic(this.#prechargeControlCharacteristicUuid),this.channelControlCharacteristic=await t.getCharacteristic(this.#channelControlCharacteristicUuid),this.uptimeCharacteristic=await t.getCharacteristic(this.#uptimeCharacteristicUuid)}async#getRuntimeControlServiceSeq(){var t=await this.gattServer.getPrimaryService(this.#runtimeControlServiceUuid);this.shutdownControlCharacteristic=await t.getCharacteristic(this.#shutdownControlCharacteristicUuid),this.turnOnCharacteristic=await t.getCharacteristic(this.#turnOnCharacteristicUuid),this.userGPOCharacteristic=await t.getCharacteristic(this.#userGPOCharacteristicUuid)}async#getBMSConfigServiceSeq(){var t=await this.gattServer.getPrimaryService(this.#configServiceUuid);this.bmsConfigCharacteristic=await t.getCharacteristic(this.#configCharacteristicUuid),this.calibCharacteristic=await t.getCharacteristic(this.#calibCharacteristicUuid),t.getCharacteristic(this.#deviceNameSetCharacteristicUuid).then(t=>{this.deviceNameCharacteristic=t}).catch(()=>{console.log("older firmware - no device name write support")})}async getDeviceName(){var t;void 0!==this.deviceNameCharacteristic&&(t=new TextDecoder("utf-8"),this.name=t.decode(await this.deviceNameCharacteristic.readValue()),void 0===this.name?setValueValues(bmsNameFields,"too old firmware"):setValueValues(bmsNameFields,this.name))}async#getBMSAlertServiceSeq(){var t=await this.gattServer.getPrimaryService(this.#alertWarningServiceUuid);this.warningCharacteristic=await t.getCharacteristic(this.#warningCharacteristicUuid),await this.warningCharacteristic.startNotifications(),this.warningCharacteristic.addEventListener("characteristicvaluechanged",this.#handleWarningIndication),this.alertCharacteristic=await t.getCharacteristic(this.#alertCharacteristicUuid),await this.alertCharacteristic.startNotifications(),this.alertCharacteristic.addEventListener("characteristicvaluechanged",this.#handleAlertIndication)}async#getBMSDataloggingServiceSeq(){var t=await this.gattServer.getPrimaryService(this.#dataLoggingServiceUuid);this.dataLoggingCharacteristic=await t.getCharacteristic(this.#dataLoggingCharacteristicUuid),setAutoconnectBMSText("Enabling Datalogging"),await this.dataLoggingCharacteristic.startNotifications(),setAutoconnectBMSText("Successfully connected!"),this.dataLoggingCharacteristic.addEventListener("characteristicvaluechanged",processData)}async pauseDataLogging(){await this.dataLoggingCharacteristic.stopNotifications()}async unPauseDataLogging(){await this.dataLoggingCharacteristic.startNotifications()}#handleWarningIndication(t){t=t.target.value;warningBuffer=t.getUint8(3)<<24|t.getUint8(2)<<16|t.getUint8(1)<<8|t.getUint8(0)}#handleAlertIndication(t){t=t.target.value;alertBuffer=t.getUint8(3)<<24|t.getUint8(2)<<16|t.getUint8(1)<<8|t.getUint8(0)}pollFaults(){void 0===bmsAveragingBuffer.at(0)||(4===bmsAveragingBuffer.at(0).stateMachineState&&this.isConnected()?(bmsObj.alertCharacteristic.readValue().then(t=>{alertBuffer=t.getUint8(3)<<24|t.getUint8(2)<<16|t.getUint8(1)<<8|t.getUint8(0)}),bmsObj.warningCharacteristic.readValue().then(t=>{warningBuffer=t.getUint8(3)<<24|t.getUint8(2)<<16|t.getUint8(1)<<8|t.getUint8(0)})):(alertBuffer=0,warningBuffer=0),updateWarningFields()),setTimeout(()=>{this.pollFaults()},500)}}let bmsObj=new bms,lastUptime=0;function pollUptime(t){if(bmsObj.isConnected())try{bmsObj.uptimeCharacteristic.readValue().then(t=>{t=handleSignedBullshit64(t.getUint8(7)<<56|t.getUint8(6)<<48|t.getUint8(5)<<40|t.getUint8(4)<<32|t.getUint8(3)<<24|t.getUint8(2)<<16|t.getUint8(1)<<8|t.getUint8(0));lastUptime=-t,countingUptime=0})}catch(t){}t&&setTimeout(()=>{pollUptime(!0)},15e3)}pollUptime(!0);let countingUptime=0;function setUptime(){bmsObj.isConnected()&&(0===lastUptime?pollUptime(!1):(countingUptime+=1e3,setOnTime(Math.floor((lastUptime+countingUptime)/1e3)))),setTimeout(setUptime,1e3)}setUptime(),bmsObj.pollFaults();