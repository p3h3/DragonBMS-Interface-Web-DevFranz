import gui_elements from"../gui_elements";import sf from"./small_functions";class localConfigCalibManager extends gui_elements{constructor(e){super(),this.bmsConfigObj=e.bmsConfigObj,this.bmsCalibObj=e.bmsCalibObj}getCalibStorage(){var e=localStorage.getItem("calibStorage");if(null===e||"undefined"===e)return console.log("[calib storage] no calibs stored yet."),{};let t;try{t=JSON.parse(e)}catch(e){return void console.log("[calib storage] error parsing json: "+e)}return t}getCalibsForSerialNumber(e){var t=this.getCalibStorage();return void 0===t[e]?{}:t[e]}getLatestCalibForSerialNumber(e){var t=this.getCalibsForSerialNumber(e);let i,a;for(const l in t)(void 0===i||i<t[l].unixTime)&&(i=t[l].unixTime,a=t[l]);return a}getOldestCalibForSerialNumber(e){var t=this.getCalibsForSerialNumber(e);let i,a;for(const l in t)(void 0===i||i>t[l].unixTime)&&(i=t[l].unixTime,a=t[l]);return a}deleteCalibObj(e){var t=this.getCalibStorage();delete t[e.serialNumber][e.timestamp],this.saveCalibStorage(t)}deleteOldestCalibObjForSerialNumber(e){e=this.getOldestCalibForSerialNumber(e);this.deleteCalibObj(e)}saveCalibStorage(t){if(null!=t){let e="";try{e=JSON.stringify(t)}catch(e){return void console.log("[calib storage] something went wrong during json.stringify: "+e)}localStorage.setItem("calibStorage",e)}}addNewCalib(e,t){let i=this.getCalibStorage();var a=t.serialNumber;if(void 0===i||null===i)console.log("lol");else{var l=sf.getDateStamp(),t={unixTime:sf.getUnixTime(),timestamp:l,serialNumber:a,displayName:t.name,calib:e.getCalibObject()};for(void 0===i[a]&&(i[a]={}),void 0!==this.getLatestCalibForSerialNumber(a)&&sf.objectsEqual(this.getLatestCalibForSerialNumber(a).calib,t.calib)&&(this.deleteCalibObj(this.getLatestCalibForSerialNumber(a)),i=this.getCalibStorage()),i[a][l]=t,this.saveCalibStorage(i);10<Object.keys(this.getCalibsForSerialNumber(a)).length;)this.deleteOldestCalibObjForSerialNumber(a)}}}export default class localConfigCalibGUI extends localConfigCalibManager{constructor(e){super(e),this.updateLatestStoredConfigCalib(),this.addEventListeners()}updateLatestStoredConfigCalib(){var e=localStorage.getItem("lastSavedConfigCalibTime");this.lastLocalConfigText.innerHTML=null===e?"none yet":"Last local stored version: "+e}addEventListeners(){sf.getId("board-config-read-in-localStorage").addEventListener("click",()=>{var e=localStorage.getItem("lastSavedBMSConfig"),t=localStorage.getItem("lastSavedBMSCalib"),i=localStorage.getItem("lastSavedConfigCalibTime");null===e||null===t||null===i||"undefined"===e||"undefined"===t||"undefined"===i?this.lastLocalConfigText.innerHTML="none yet":(this.bmsConfigObj.readInJSON(e),this.bmsCalibObj.readInJSON(t),this.bmsConfigObj.setGUIValues(),this.bmsCalibObj.setGUIValues())}),sf.getId("board-config-write-to-localStorage").addEventListener("click",()=>{if(this.bmsConfigObj.initialised&&this.bmsCalibObj.initialised){this.bmsConfigObj.readInGUIValues(),this.bmsCalibObj.readInGUIValues();var t=this.bmsConfigObj.getJSON(),i=this.bmsCalibObj.getJSON();let e="";void 0!==sf.getIdValue("board-config-device-name")&&(e=sf.getIdValue("board-config-device-name")),localStorage.setItem("lastSavedBMSConfig",t),localStorage.setItem("lastSavedBMSCalib",i),localStorage.setItem("lastSavedConfigCalibTime",e+" "+sf.getDateStamp()),this.updateLatestStoredConfigCalib()}}),this.calibBackupDeviceSelect.addEventListener("change",()=>{let i=this.getCalibStorage();const a=this.calibBackupDeviceSelect.options[this.calibBackupDeviceSelect.selectedIndex].value;for(;this.calibBackupSelect.firstChild;)this.calibBackupSelect.removeChild(this.calibBackupSelect.lastChild);"none"!==a&&Object.keys(i[a]).reverse().forEach(e=>{var e=i[a][e],t=document.createElement("option");t.value=a+";"+e.timestamp,t.innerHTML=e.timestamp,this.calibBackupSelect.appendChild(t)})}),this.calibBackupReadButton.addEventListener("click",()=>{var e,t=this.calibBackupSelect.options[this.calibBackupSelect.selectedIndex].value;""!==t&&(e=t.split(";")[0],t=t.split(";")[1],e=this.getCalibStorage()[e][t].calib,this.bmsCalibObj.readInCalibObject(e),this.bmsCalibObj.setGUIValues())})}fillInCalibBackupGUI(){var e=this.getCalibStorage();if(0===Object.keys(e).length)this.calibBackupDeviceSelect.disabled=!0,this.calibBackupSelect.disabled=!0;else{for(this.calibBackupDeviceSelect.disabled=!1,this.calibBackupSelect.disabled=!1;this.calibBackupDeviceSelect.firstChild;)this.calibBackupDeviceSelect.removeChild(this.calibBackupDeviceSelect.lastChild);for(;this.calibBackupSelect.firstChild;)this.calibBackupSelect.removeChild(this.calibBackupSelect.lastChild);var t=document.createElement("option");t.value="none",t.innerHTML="none",this.calibBackupDeviceSelect.appendChild(t);for(const l in e){var i=e[l][Object.keys(e[l])[0]],a=document.createElement("option");a.value=l,a.innerHTML=i.displayName,this.calibBackupDeviceSelect.appendChild(a)}}}}export{localConfigCalibManager};